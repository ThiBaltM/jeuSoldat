from listeChainee import Liste
from classSols import *

map0=[["w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w"],
    ["w","w","h","h","w","e","e","e","e","e","e","e","e","h","h","h","w","h","h","h","h","w","w","w","w","w","w","w","w","w","w"],
    ["w","w","h","h","w","e","e","e","e","e","e","e","e","h","h","h","w","h","h","h","h","w","w","w","w","w","w","w","w","w","w"],
    ["w","w","h","w","w","e","e","e","e","e","e","e","e","h","h","h","w","h","h","h","h","w","w","w","w","w","w","w","w","w","w"],
    ["w","h","h","h","h","h","e","e","e","e","e","e","e","h","h","h","w","w","h","w","w","w","w","w","w","w","w","w","w","w","w"],
    ["w","h","h","h","h","h","h","h","e","e","e","e","e","e","h","h","h","h","h","t","t","h","h","w","w","w","w","w","w","w","w"],
    ["w","h","h","h","h","h","h","h","h","w","e","e","e","e","e","e","h","h","h","h","h","h","h","w","w","w","w","w","w","w","w"],
    ["w","h","h","h","h","h","h","h","h","w","e","e","e","e","e","e","h","h","h","h","h","h","h","h","h","h","h","w","w","w","w"],
    ["w","t","h","h","h","h","w","h","w","w","h","e","e","e","e","e","h","h","h","h","h","h","h","h","h","h","h","w","w","w","w"],
    ["w","t","h","h","h","h","w","h","h","h","h","h","h","e","e","w","h","h","w","w","w","h","h","h","h","h","h","w","w","w","w"],
    ["w","w","w","w","w","w","w","h","h","h","h","h","h","h","h","h","h","h","h","h","w","h","h","h","h","h","h","h","w","w","w"],
    ["w","e","e","e","e","e","e","e","e","e","h","h","h","h","h","h","h","h","h","h","w","h","h","h","h","h","h","h","h","w","w"],
    ["w","e","e","e","e","e","e","e","e","e","e","h","e","e","h","h","h","h","h","h","w","t","h","h","h","h","h","h","h","w","w"],
    ["w","h","h","h","h","h","h","h","h","h","e","e","e","e","e","h","h","h","h","h","w","t","h","h","h","h","h","h","h","h","w"],
    ["w","w","w","w","w","w","w","h","h","h","h","h","e","e","e","h","h","h","h","w","w","w","h","h","h","h","h","h","h","h","w"],
    ["w","h","h","h","h","h","w","w","w","w","h","h","h","e","h","h","h","h","w","w","w","w","w","w","h","h","h","h","h","h","w"],
    ["w","h","h","h","h","h","h","h","h","w","h","h","h","e","h","h","h","h","w","w","w","w","w","w","h","h","h","h","h","h","w"],
    ["w","h","h","h","h","h","h","h","h","w","h","h","h","h","h","h","h","h","w","w","w","w","w","w","w","h","h","h","h","w","w"],
    ["w","h","h","h","h","h","h","h","h","h","h","h","h","h","h","h","h","w","w","w","w","w","w","w","w","h","h","w","w","w","w"],
    ["w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w","w"]]

tabMap0 = Liste()
for ligne in reversed(map0):
    t = Liste()
    for val in reversed(ligne):
        v = Liste()
        if val == "w":
            v.append(Wall())
        elif val == "h":
            v.append(Herbe())
        elif val == "e":
            v.append(Water())
        else:
            v.append(Tent())
        t.append(v)
    tabMap0.append(t)
        
    



